var postgrestSpecs = (function (exports,m,prop,_) {
'use strict';

m = m && m.hasOwnProperty('default') ? m['default'] : m;
prop = prop && prop.hasOwnProperty('default') ? prop['default'] : prop;
_ = _ && _.hasOwnProperty('default') ? _['default'] : _;

var filtersVM = function filtersVM(attributes) {
    var newVM = {},
        filter = function filter() {
        var innerProp = prop(''),
            filterProp = function filterProp(value) {
            if (arguments.length > 0) {
                innerProp(value);
                return newVM;
            }
            return innerProp();
        };
        // Just so we can have a default to_filter and avoid if _.isFunction calls
        filterProp.toFilter = function () {
            return _.isString(filterProp()) ? filterProp().trim() : filterProp();
        };
        return filterProp;
    },
        getters = _.reduce(attributes, function (memo, operator, attr) {
        // The operator between is implemented with two properties, one for greater than value and another for lesser than value.
        // Both properties are sent in the queurystring with the same name,
        // that's why we need the special case here, so we can use a simple map as argument to filtersVM.
        if (operator === 'between') {
            memo[attr] = {
                lte: filter(),
                gte: filter()
            };
        } else {
            memo[attr] = filter();
        }
        return memo;
    }, {
        order: filter()
    }),
        parametersWithoutOrder = function parametersWithoutOrder() {
        return _.reduce(getters, function (memo, getter, attr) {
            if (attr !== 'order') {
                var operator = attributes[attr];

                if (_.isFunction(getter.toFilter) && (getter.toFilter() === undefined || getter.toFilter() === '')) {
                    return memo;
                }

                // Bellow we use different formatting rules for the value depending on the operator
                // These rules are used regardless of the toFilter function,
                // so the user can use a custom toFilter without having to worry with basic filter syntax
                if (operator === 'ilike' || operator === 'like') {
                    memo[attr] = operator + '.*' + getter.toFilter() + '*';
                } else if (operator === '@@') {
                    memo[attr] = operator + '.' + getter.toFilter().replace(/\s+/g, '&');
                } else if (operator === 'between') {
                    if (!getter.lte.toFilter() && !getter.gte.toFilter()) {
                        return memo;
                    }
                    memo[attr] = [];
                    if (getter.gte()) {
                        memo[attr].push('gte.' + getter.gte.toFilter());
                    }
                    if (getter.lte()) {
                        memo[attr].push('lte.' + getter.lte.toFilter());
                    }
                } else if (operator === 'is.null') {
                    memo[attr] = getter.toFilter() === null ? 'is.null' : 'not.is.null';
                } else {
                    memo[attr] = operator + '.' + getter.toFilter();
                }
            }
            return memo;
        }, {});
    },
        parameters = function parameters() {
        // The order parameters have a special syntax (just like an order by SQL clause)
        // https://github.com/begriffs/postgrest/wiki/Routing#filtering-and-ordering
        var order = function order() {
            return getters.order() && _.reduce(getters.order(), function (memo, direction, attr) {
                memo.push(attr + '.' + direction);
                return memo;
            }, []).join(',');
        },
            orderParameter = order() ? {
            order: order()
        } : {};

        return _.extend({}, orderParameter, parametersWithoutOrder());
    };

    return _.extend(newVM, getters, {
        parameters: parameters,
        parametersWithoutOrder: parametersWithoutOrder
    });
};

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var paginationVM = function paginationVM(model, order) {
    var extraHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var authenticate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    var collection = prop([]),
        defaultOrder = order || 'id.desc',
        filters = prop({
        order: defaultOrder
    }),
        isLoading = prop(false),
        page = prop(1),
        resultsCount = prop(),
        pageRequest = authenticate ? model.getPageWithToken : model.getPage,
        total = prop();

    var fetch = function fetch() {
        return new Promise(function (resolve, reject) {

            var getTotal = function getTotal(xhr) {
                if (!xhr || xhr.status === 0) {
                    return JSON.stringify({
                        hint: null,
                        details: null,
                        code: 0,
                        message: 'Connection error'
                    });
                }
                var rangeHeader = xhr.getResponseHeader('Content-Range');
                if (_.isString(rangeHeader)) {
                    var _rangeHeader$split = rangeHeader.split('/'),
                        _rangeHeader$split2 = _slicedToArray(_rangeHeader$split, 2),
                        headerSize = _rangeHeader$split2[0],
                        headerCount = _rangeHeader$split2[1],
                        _headerSize$split = headerSize.split('-'),
                        _headerSize$split2 = _slicedToArray(_headerSize$split, 2),
                        headerFrom = _headerSize$split2[0],
                        headerTo = _headerSize$split2[1],
                        to = parseInt(headerTo) + 1 || 0,
                        from = parseInt(headerFrom) || 0;

                    total(parseInt(headerCount));
                    resultsCount(to - from);
                }
                try {
                    return xhr.responseText;
                } catch (ex) {
                    return JSON.stringify({
                        hint: null,
                        details: null,
                        code: 0,
                        message: xhr.responseText
                    });
                }
            };
            isLoading(true);
            pageRequest(filters(), page(), {
                background: true,
                extract: getTotal
            }, extraHeaders).then(function (data) {
                collection(_.union(collection(), data));
                isLoading(false);
                resolve(collection());
                m.redraw();
            }, function (error) {
                isLoading(false);
                total(0);
                reject(error);
                m.redraw();
            });
        });
    },
        firstPage = function firstPage(parameters) {
        filters(_.extend({
            order: defaultOrder
        }, parameters));
        collection([]);
        page(1);
        return fetch();
    },
        isLastPage = function isLastPage() {
        return model.pageSize() > resultsCount();
    },
        nextPage = function nextPage() {
        page(page() + 1);
        return fetch();
    };

    return {
        collection: collection,
        firstPage: firstPage,
        isLoading: isLoading,
        nextPage: nextPage,
        isLastPage: isLastPage,
        total: total,
        resultsCount: resultsCount
    };
};

function Postgrest() {
    var postgrest = {};
    var token = prop(),
        mergeConfig = function mergeConfig(config, options) {
        return options && _.isFunction(options.config) ? _.compose(options.config, config) : config;
    },
        addHeaders = function addHeaders(headers) {
        return function (xhr) {
            _.each(headers, function (value, key) {
                xhr.setRequestHeader(key, value);
            });
            return xhr;
        };
    },
        addConfigHeaders = function addConfigHeaders(headers, options) {
        return _.extend({}, options, {
            config: mergeConfig(addHeaders(headers), options)
        });
    },
        createLoader = function createLoader(requestFunction, options) {
        var defaultState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        var loader = prop(defaultState);
        loader.load = function () {
            return new Promise(function (resolve, reject) {
                loader(true);
                m.redraw();
                requestFunction(_.extend({}, options, {
                    background: true
                })).then(function (data) {
                    loader(false);
                    console.log('downloaded data: ', data);
                    resolve(data);
                    m.redraw();
                    console.log('enqueued redraw');
                }, function (error) {
                    loader(false);
                    reject(error);
                    m.redraw();
                });
            });
        };
        return loader;
    },
        representationHeader = {
        'Prefer': 'return=representation'
    };

    postgrest.token = token;

    postgrest.init = function (apiPrefix, authenticationOptions) {
        var globalHeader = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        postgrest.request = function (options) {
            var errorHandler = function errorHandler(xhr) {
                try {
                    return xhr.responseText;
                } catch (ex) {
                    return JSON.stringify({
                        hint: null,
                        details: null,
                        code: 0,
                        message: xhr.responseText
                    });
                }
            };
            return m.request(addConfigHeaders(globalHeader, _.extend({ extract: errorHandler }, options, {
                url: apiPrefix + options.url
            })));
        };

        var authenticationRequested = prop(false);
        postgrest.authenticate = function (delegatedDeferred) {
            var deferred = delegatedDeferred || new Promise(function (resolve, reject) {
                if (token()) {
                    resolve({ token: token() });
                } else if (!authenticationRequested()) {
                    authenticationRequested(true);

                    m.request(_.extend({}, authenticationOptions)).then(function (data) {
                        authenticationRequested(false);
                        token(data.token);
                        resolve({ token: token() });
                    }).catch(function (data) {
                        authenticationRequested(false);
                        reject(data);
                    });
                } else {
                    setTimeout(function () {
                        return postgrest.authenticate(deferred);
                    }, 250);
                }
            });
            return deferred;
        };

        postgrest.requestWithToken = function (options) {
            return postgrest.authenticate().then(function () {
                return postgrest.request(addConfigHeaders({
                    'Authorization': 'Bearer ' + token()
                }, options));
            }, function () {
                return postgrest.request(options);
            });
        };

        postgrest.loader = _.partial(createLoader, postgrest.request);

        postgrest.loaderWithToken = _.partial(createLoader, postgrest.requestWithToken);

        postgrest.model = function (name) {
            var paginationHeaders = function paginationHeaders(page, pageSize) {
                if (!pageSize) {
                    return;
                }

                var toRange = function toRange() {
                    var from = (page - 1) * pageSize,
                        to = from + pageSize - 1;
                    return from + '-' + to;
                };

                return {
                    'Range-unit': 'items',
                    'Range': toRange()
                };
            },
                pageSize = prop(10),
                nameOptions = {
                url: '/' + name
            },
                getOptions = function getOptions(data, page, pageSize, options) {
                var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

                var extraHeaders = _.extend({}, {
                    'Prefer': 'count=none'
                }, headers, paginationHeaders(page, pageSize));
                return addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'GET',
                    data: data
                }));
            },
                querystring = function querystring(filters, options) {
                options.url += '?' + m.route.buildQueryString(filters);
                return options;
            },
                options = function options(_options) {
                return postgrest.request(_.extend({}, _options, nameOptions, {
                    method: 'OPTIONS'
                }));
            },
                postOptions = function postOptions(attributes, options) {
                var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                var extraHeaders = _.extend({}, representationHeader, headers);
                return addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'POST',
                    data: attributes
                }));
            },
                deleteOptions = function deleteOptions(filters, options) {
                var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                var extraHeaders = _.extend({}, representationHeader, headers);
                return querystring(filters, addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'DELETE'
                })));
            },
                patchOptions = function patchOptions(filters, attributes, options) {
                var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

                var extraHeaders = _.extend({}, representationHeader, headers);
                return querystring(filters, addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'PATCH',
                    data: attributes
                })));
            },
                getPageOptions = function getPageOptions(data, page, options) {
                var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

                return getOptions(data, page || 1, pageSize(), options, headers);
            },
                getRowOptions = function getRowOptions(data, options) {
                var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                return getOptions(data, 1, 1, options, headers);
            };

            return {
                pageSize: pageSize,
                getPageOptions: getPageOptions,
                getRowOptions: getRowOptions,
                patchOptions: patchOptions,
                postOptions: postOptions,
                deleteOptions: deleteOptions,
                getPage: _.compose(postgrest.request, getPageOptions),
                getRow: _.compose(postgrest.request, getRowOptions),
                patch: _.compose(postgrest.request, patchOptions),
                post: _.compose(postgrest.request, postOptions),
                deleteRequest: _.compose(postgrest.request, deleteOptions),
                getPageWithToken: _.compose(postgrest.requestWithToken, getPageOptions),
                getRowWithToken: _.compose(postgrest.requestWithToken, getRowOptions),
                patchWithToken: _.compose(postgrest.requestWithToken, patchOptions),
                postWithToken: _.compose(postgrest.requestWithToken, postOptions),
                deleteWithToken: _.compose(postgrest.requestWithToken, deleteOptions),
                options: options
            };
        };

        return postgrest;
    };

    postgrest.filtersVM = filtersVM;
    postgrest.paginationVM = paginationVM;

    return postgrest;
}

describe("postgrest.authenticate", function () {
  var token = "authentication token";
  var authentication_endpoint = "/authentication_endpoint";
  var postgrest = new Postgrest();

  beforeEach(function () {
    postgrest.token(undefined);
    jasmine.Ajax.stubRequest(authentication_endpoint).andReturn({
      'responseText': JSON.stringify({ token: token })
    });
    postgrest.init("", { method: "GET", url: authentication_endpoint });
    spyOn(m, 'request').and.callThrough();
  });

  describe("when token is not in localStorage", function () {
    beforeEach(function () {
      postgrest.authenticate();
      postgrest.authenticate();
      postgrest.authenticate();
    });

    it('should debounce requests', function () {
      expect(m.request.calls.count()).toEqual(1);
    });
    it("should store the token", function () {
      expect(postgrest.token()).toEqual(token);
    });
  });

  describe("when token is present", function () {
    beforeEach(function () {
      postgrest.token(token);
    });

    it("should return a promise with the token in the data parameter", function () {
      var promise = postgrest.authenticate();
      promise.then(function (data) {
        expect(data.token).toEqual(token);
      });
      expect(m.request).not.toHaveBeenCalled();
    });
  });
});

describe("postgrest.filtersVM", function () {
  var postgrest = new Postgrest();
  var vm = null;

  beforeEach(function () {
    vm = postgrest.filtersVM({ id: 'eq', name: 'ilike', value: 'between', full_text: '@@', deactivated_at: 'is.null' });
  });

  it("should have a getter for each attribute plus one for order", function () {
    expect(vm.id).toBeFunction();
    expect(vm.name).toBeFunction();
    expect(vm.value.lte).toBeFunction();
    expect(vm.value.gte).toBeFunction();
    expect(vm.full_text).toBeFunction();
    expect(vm.deactivated_at).toBeFunction();
    expect(vm.order).toBeFunction();
  });

  it("should have a parameters function", function () {
    expect(vm.parameters).toBeFunction();
  });

  it("should be able to set filter to undefined", function () {
    vm.id(undefined).name('foo');
    expect(vm.parameters()).toEqual({ name: 'ilike.*foo*' });
  });

  it("should be able to set filter to false", function () {
    vm.id(false).name('foo');
    expect(vm.parameters()).toEqual({ id: 'eq.false', name: 'ilike.*foo*' });
  });

  it("the parameters function should build an object for the request using PostgREST syntax", function () {
    vm.id(7).name('foo').value.gte(1).value.lte(2).full_text(' foo  bar qux ').deactivated_at(!null).order({ name: 'asc', id: 'desc' });
    expect(vm.parameters()).toEqual({ id: 'eq.7', name: 'ilike.*foo*', order: 'name.asc,id.desc', value: ['gte.1', 'lte.2'], full_text: '@@.foo&bar&qux', deactivated_at: 'not.is.null' });
  });

  it("the chain function should build an object for the request using PostgREST syntax", function () {
    var chain = vm.id(7).name('foo').value.gte(1).value.lte(2).full_text(' foo  bar qux ').deactivated_at(!null).order({ name: 'asc', id: 'desc' }).parameters();
    expect(chain).toEqual({ id: 'eq.7', name: 'ilike.*foo*', order: 'name.asc,id.desc', value: ['gte.1', 'lte.2'], full_text: '@@.foo&bar&qux', deactivated_at: 'not.is.null' });
  });

  it("should use custom .toFilter to get value from filter getters", function () {
    vm.name('foo');
    vm.name.toFilter = function () {
      return this().replace(/oo/, 'u');
    };
    expect(vm.parameters()).toEqual({ name: 'ilike.*fu*' });
  });

  it("the parameters function should skip undefined values", function () {
    vm.id(undefined);
    vm.name(undefined);
    vm.value.lte(undefined);
    vm.value.gte(undefined);
    vm.deactivated_at(undefined);
    vm.order(undefined);
    expect(vm.parameters()).toEqual({});
  });

  it("should skip when toFilter returns blank", function () {
    var returnBlank = function returnBlank() {
      return '';
    };
    vm.id(7);
    vm.name('foo');
    vm.value.gte(1);
    vm.value.lte(2);
    vm.full_text(' foo  bar qux ');
    vm.deactivated_at(true);
    vm.id.toFilter = returnBlank;
    vm.name.toFilter = returnBlank;
    vm.value.lte.toFilter = returnBlank;
    vm.value.gte.toFilter = returnBlank;
    vm.full_text.toFilter = returnBlank;
    vm.deactivated_at.toFilter = returnBlank;
    expect(vm.parameters()).toEqual({});
  });
});

describe("postgrest.init & postgrest.request", function () {
    var postgrest = new Postgrest();
    var apiPrefix = "http://api.foo.com/v1/";

    beforeEach(function () {
        postgrest.init(apiPrefix);
        spyOn(m, 'request');
    });

    it("should append api prefix used on init to request url", function () {
        postgrest.request({ method: "GET", url: "pages.json" });
        expect(m.request).toHaveBeenCalledWith({ method: "GET", url: apiPrefix + "pages.json", extract: jasmine.any(Function), config: jasmine.any(Function) });
    });
});

describe("postgrest.loader", function () {
  var vm = null;
  var postgrest = new Postgrest();
  postgrest.init(apiPrefix);

  beforeEach(function () {
    var then = function then(callback) {
      callback([]);
    };
    spyOn(m, 'request').and.callFake(function (options) {
      expect(vm()).toEqual(true);
      return { then: then };
    });
    vm = postgrest.loader({});
  });

  it("should create vm as a getter/setter", function () {
    expect(vm()).toEqual(false);
    vm(true);
    expect(vm()).toEqual(true);
  });

  it("should update loader state to true before resolving request", function () {
    vm(false);
    vm.load();
    expect(vm()).toEqual(false);
  });
});

describe("postgrest.model", function () {
  var postgrest = new Postgrest();
  var apiPrefix = "http://api.foo.com/v1/",
      token = "authentication token",
      authentication_endpoint = "/authentication_endpoint",
      xhr = {
    setRequestHeader: function setRequestHeader() {}
  },
      model = null;

  beforeEach(function () {
    localStorage.setItem("postgrest.token", token);
    postgrest.init(apiPrefix, { method: "GET", url: authentication_endpoint });
    spyOn(xhr, "setRequestHeader");

    model = postgrest.model('foo');
  });

  it("should create getPage and getPageWithToken", function () {
    expect(model.getPage).toBeFunction();
    expect(model.getPageWithToken).toBeFunction();
  });

  describe("post and postWithToken", function () {
    beforeEach(function () {
      spyOn(postgrest, "requestWithToken");
      model = postgrest.model('foo');
      model.postWithToken({ bar: 'qux' });
    });

    it("should call postgrest.requestWithToken with model name", function () {
      expect(postgrest.requestWithToken).toHaveBeenCalledWith({ method: "POST", url: "/foo", data: { bar: 'qux' }, config: jasmine.any(Function) });
    });
  });

  describe("options", function () {
    beforeEach(function () {
      spyOn(postgrest, "request");
      model = postgrest.model('foo');
      model.options();
    });

    it("should call postgrest.requestWithToken with model name", function () {
      expect(postgrest.request).toHaveBeenCalledWith({ method: "OPTIONS", url: "/foo" });
    });
  });

  describe("delete and deleteWithToken", function () {
    beforeEach(function () {
      spyOn(postgrest, "requestWithToken");
      model = postgrest.model('foo');
      model.deleteWithToken({ id: 'eq.1' });
    });

    it("should call postgrest.requestWithToken with model name", function () {
      expect(postgrest.requestWithToken).toHaveBeenCalledWith({ method: "DELETE", url: "/foo?id=eq.1", config: jasmine.any(Function) });
    });
  });

  describe("patch and patchWithToken", function () {
    beforeEach(function () {
      var fakeRequest = function fakeRequest(options) {
        options.config(xhr);
        // Default behaviour is to return representation
        expect(xhr.setRequestHeader).toHaveBeenCalledWith('Prefer', 'return=representation');
      };
      spyOn(postgrest, "requestWithToken").and.callFake(fakeRequest);

      model = postgrest.model('foo');
      model.patchWithToken({ id: 'eq.1' }, { bar: 'qux' });
    });

    it("should call postgrest.requestWithToken with model name", function () {
      expect(postgrest.requestWithToken).toHaveBeenCalledWith({ method: "PATCH", url: "/foo?id=eq.1", data: { bar: 'qux' }, config: jasmine.any(Function) });
    });
  });

  describe("getPage and getPageWithToken", function () {
    beforeEach(function () {
      var fakeRequest = function fakeRequest(options) {
        options.config(xhr);
        expect(xhr.setRequestHeader).toHaveBeenCalledWith('Range-unit', 'items');
        expect(xhr.setRequestHeader).toHaveBeenCalledWith('Range', '0-9');
        // Default behaviour is to not have the count
        expect(xhr.setRequestHeader).toHaveBeenCalledWith('Prefer', 'count=none');
      };
      spyOn(postgrest, "request").and.callFake(fakeRequest);
      spyOn(postgrest, "requestWithToken").and.callFake(fakeRequest);

      model = postgrest.model('foo');
    });

    describe("#getPageWithToken", function () {
      beforeEach(function () {
        model.getPageWithToken();
      });

      it("should call postgrest.requestWithToken with model name", function () {
        expect(postgrest.requestWithToken).toHaveBeenCalledWith({ method: "GET", url: "/foo", data: undefined, config: jasmine.any(Function) });
      });
    });

    describe("#getPage", function () {
      beforeEach(function () {
        model.getPage({ filter: 1 }, 1, { extra_options: 2 });
      });

      it("should call postgrest.request with model name", function () {
        expect(postgrest.request).toHaveBeenCalledWith({ method: "GET", url: "/foo", data: { filter: 1 }, config: jasmine.any(Function), extra_options: 2 });
      });
    });
  });

  describe("getRow and getRowWithToken", function () {
    beforeEach(function () {
      var fakeRequest = function fakeRequest(options) {
        options.config(xhr);
        expect(xhr.setRequestHeader).toHaveBeenCalledWith('Range-unit', 'items');
        expect(xhr.setRequestHeader).toHaveBeenCalledWith('Range', '0-0');
      };
      spyOn(postgrest, "request").and.callFake(fakeRequest);
      spyOn(postgrest, "requestWithToken").and.callFake(fakeRequest);

      model = postgrest.model('foo');
    });

    describe("#getRowWithToken", function () {
      beforeEach(function () {
        model.getRowWithToken();
      });

      it("should call postgrest.requestWithToken with model name", function () {
        expect(postgrest.requestWithToken).toHaveBeenCalledWith({ method: "GET", url: "/foo", data: undefined, config: jasmine.any(Function) });
      });
    });

    describe("#getRow", function () {
      beforeEach(function () {
        model.getRow({ filter: 1 }, { extra_options: 2 });
      });

      it("should call postgrest.request with model name", function () {
        expect(postgrest.request).toHaveBeenCalledWith({ method: "GET", url: "/foo", data: { filter: 1 }, config: jasmine.any(Function), extra_options: 2 });
      });
    });
  });
});

describe("postgrest.paginationVM", function () {
    var postgrest;
    var vm = null;
    var apiPrefix = "http://api.foo.com/v1";
    var model = null;
    var header = { 'Prefer': 'count=exact' };
    var error = {
        hint: null,
        details: null,
        code: 0,
        message: 'Invalid user'
    };

    beforeEach(function () {
        postgrest = new Postgrest();
        postgrest.init(apiPrefix);
        model = postgrest.model('foo');
    });

    describe("when fetch fails", function () {
        beforeEach(function () {
            vm = postgrest.paginationVM(model, null, header, false);
            jasmine.Ajax.stubRequest(/foo.*/).andReturn({ responseText: JSON.stringify(error) });
        });

        it("should be initialized with a getter returning an empty array", function () {
            expect(vm.collection()).toBeEmptyArray();
        });

        it("should receive error message and let array empty", function () {
            var error;
            vm.nextPage().then(null, function (e) {
                error = e;
            });
            expect(error).toEqual(error);
            expect(vm.collection()).toEqual([]);
        });
    });

    describe("when fetch is successful", function () {
        beforeEach(function () {
            spyOn(model, "getPage").and.callThrough();
            vm = postgrest.paginationVM(model, null, header, false);
            jasmine.Ajax.stubRequest(/foo.*/).andReturn({
                'responseText': '["items"]'
            });
        });

        it("should add count=exact header", function () {
            var lastRequest = jasmine.Ajax.requests.mostRecent();
            expect(lastRequest.requestHeaders.Prefer).toEqual(header.Prefer);
        });

        describe("#collection", function () {
            it("should be initialized with a getter returning an empty array", function () {
                expect(vm.collection()).toBeEmptyArray();
            });

            it("should receive more itens from the fetched pages", function () {
                vm.nextPage();
                expect(vm.collection()).toEqual(['items']);
            });
        });

        describe("#isLoading", function () {
            it("should be a function", function () {
                expect(vm.isLoading).toBeFunction();
            });
        });

        describe("#firstPage", function () {
            it("should be a function", function () {
                var lastRequest = jasmine.Ajax.requests.mostRecent();
                expect(vm.firstPage).toBeFunction();
            });

            it("should call the getPage without incrementing the page number and only with default order if no parameters are passed", function () {
                vm.firstPage({ id: 'eq.0' });
                vm.firstPage();
                expect(model.getPage).toHaveBeenCalledWith({ order: 'id.desc' }, 1, { background: true, extract: jasmine.any(Function) }, header);
            });

            it("should call the getPage without incrementing the page number and with filters passed as parameters", function () {
                vm.firstPage({ id: 'eq.0' });
                expect(model.getPage).toHaveBeenCalledWith({ id: 'eq.0', order: 'id.desc' }, 1, { background: true, extract: jasmine.any(Function) }, header);
            });
        });

        describe("#total", function () {
            var mockRequest = function mockRequest(range) {
                jasmine.Ajax.stubRequest(/foo.*/).andReturn({
                    responseHeaders: [{ name: 'Content-Range', value: range }],
                    responseText: '["items"]'
                });
            };

            beforeEach(function () {
                vm = postgrest.paginationVM(model, null, header, false);
            });

            it("should return number when total is present", function () {
                mockRequest('0-1/2');
                vm.firstPage();
                expect(vm.total()).toEqual(2);
            });

            it("should return NaN when total is not a number", function () {
                mockRequest('0-1/*');
                vm.firstPage();
                expect(vm.total()).toEqual(NaN);
            });
        });

        describe("#isLastPage", function () {
            var mockRequest = function mockRequest(range) {
                jasmine.Ajax.stubRequest(/foo.*/).andReturn({
                    responseHeaders: [{ name: 'Content-Range', value: range }],
                    responseText: '["items"]'
                });
            };

            beforeEach(function () {
                vm = postgrest.paginationVM(model, null, header, false);
            });

            it("should return true when is the last page", function () {
                mockRequest('0-1/2');
                vm.firstPage();
                expect(vm.isLastPage()).toEqual(true);
            });

            it("should return true when empty", function () {
                mockRequest('*/*');
                vm.firstPage();
                expect(vm.isLastPage()).toEqual(true);
            });

            it("should return false when is not the last page", function () {
                mockRequest('0-9/11');
                vm.firstPage();
                expect(vm.isLastPage()).toEqual(false);
            });
        });

        describe("#nextPage", function () {
            it("should be a function", function () {
                expect(vm.nextPage).toBeFunction();
            });

            it("should call the getPage incrementing the page number and with default filters", function () {
                vm.nextPage();
                expect(model.getPage).toHaveBeenCalledWith({ order: 'id.desc' }, 2, { background: true, extract: jasmine.any(Function) }, header);
            });
        });
    });
});

describe("postgrest.requestWithToken", function () {
  var apiPrefix = "http://api.foo.com/v1/",
      token = "authentication token",
      authentication_endpoint = "/authentication_endpoint",
      lastRequest;
  var postgrest = new Postgrest();

  beforeEach(function () {
    postgrest.token(token);
    postgrest.init(apiPrefix, { method: "GET", url: authentication_endpoint });
    spyOn(postgrest, 'authenticate').and.callThrough();
    spyOn(m, 'request').and.callThrough();
  });

  it("should call authenticate", function () {
    postgrest.requestWithToken({ method: "GET", url: "pages.json" });
    expect(postgrest.authenticate).toHaveBeenCalled();
  });

  describe("when token is undefined and authentication succeeds", function () {
    it("should call authenticate and store token", function () {
      jasmine.Ajax.stubRequest('/authentication_endpoint').andReturn({
        'responseText': JSON.stringify({ token: token }),
        status: 200
      });
      postgrest.token(undefined);
      postgrest.requestWithToken({ method: "GET", url: "pages.json" });
      lastRequest = jasmine.Ajax.requests.mostRecent();
      expect(postgrest.authenticate).toHaveBeenCalled();
      expect(lastRequest.url).toEqual(apiPrefix + 'pages.json');
      expect(lastRequest.requestHeaders.Authorization).toEqual('Bearer ' + token);
    });
  });

  describe("when authentication fails", function () {
    it("should call authenticate and fallback to request", function () {
      jasmine.Ajax.stubRequest('/authentication_endpoint').andReturn({
        'responseText': JSON.stringify({}),
        status: 500
      });
      postgrest.token(undefined);
      postgrest.requestWithToken({ method: "GET", url: "pages.json" });
      lastRequest = jasmine.Ajax.requests.mostRecent();
      expect(postgrest.authenticate).toHaveBeenCalled();
      expect(lastRequest.url).toEqual(apiPrefix + 'pages.json');
      expect(lastRequest.requestHeaders.Authorization).toEqual(undefined);
    });
  });

  describe("when I try to configure a custom header", function () {
    beforeEach(function () {
      var xhrConfig = function xhrConfig(xhr) {
        xhr.setRequestHeader("Content-Type", "application/json");
      };

      postgrest.requestWithToken({ method: "GET", url: "pages.json", config: xhrConfig });
      lastRequest = jasmine.Ajax.requests.mostRecent();
    });

    it("should call m.request and our custom xhrConfig", function () {
      expect(lastRequest.requestHeaders['Content-Type']).toEqual('application/json');
    });

    it("should call m.request using API prefix and authorization header", function () {
      expect(lastRequest.requestHeaders.Authorization).toEqual('Bearer ' + token);
    });
  });
});

describe("postgrest.requestWithToken callbacks order", function () {
  var apiPrefix = "http://api.foo.com/v1/",
      token = "authentication token",
      authentication_endpoint = "/authentication_endpoint",
      requestResult = 'request result',
      authenticateTime = 10,
      requestTime = 5;
  var postgrest = new Postgrest();

  beforeEach(function () {
    postgrest.init(apiPrefix, { method: "GET", url: authentication_endpoint });

    spyOn(postgrest, 'authenticate').and.callFake(function () {
      var deferred = m.deferred();
      setTimeout(function () {
        localStorage.setItem("postgrest.token", token);
        deferred.resolve({ token: token });
      }, authenticateTime);
      return deferred.promise;
    });

    spyOn(postgrest, 'request').and.callFake(function (options) {
      // Ensure that the token was set before we call the request
      expect(localStorage.getItem("postgrest.token")).toEqual(token);
      var deferred = m.deferred();
      setTimeout(function () {
        deferred.resolve(requestResult);
      }, requestTime);
      return deferred.promise;
    });
  });

  it("should call authenticate, then the request and handle the request result in the returning promise", function (done) {
    postgrest.requestWithToken({ method: "GET", url: "pages.json" }).then(function (data) {
      expect(data).toEqual(requestResult);
      done();
    });
    expect(postgrest.authenticate).toHaveBeenCalled();
  });
});

return exports;

}({},m,prop,_));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
